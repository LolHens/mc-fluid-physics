/*buildscript {
    repositories {
        jcenter()
        maven { url "https://maven.fabricmc.net/" }
        maven { url "https://dl.bintray.com/shedaniel/cloth" }
        maven { url "https://files.minecraftforge.net/maven/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'architectury-plugin', name: 'architectury-plugin.gradle.plugin', version: '2.0.66'
        classpath group: 'forgified-fabric-loom', name: 'forgified-fabric-loom.gradle.plugin', version: '0.6.60'
    }
}
apply plugin: "architectury-plugin"*/

plugins {
    id "architectury-plugin" version "2.0.65"
    id "forgified-fabric-loom" version "0.6.59" apply false
}

architectury {
    minecraft = project.minecraft_version
}

subprojects {
    apply plugin: "forgified-fabric-loom"

    loom {
        silentMojangMappingsLicense()
    }
    
    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()

        compile "io.circe:circe-parser_2.13:0.13.0"
        compile "io.circe:circe-generic_2.13:0.13.0"
        compile "io.circe:circe-generic-extras_2.13:0.13.0"
        compile "io.circe:circe-config_2.13:0.7.0"
    }
}

allprojects {
    apply plugin: "scala"
    apply plugin: "architectury-plugin"

    archivesBaseName = parent.project.archives_base_name
    version = parent.project.mod_version
    group = parent.project.maven_group

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.
        def targetVersion = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release = targetVersion
        }
    }

    java {
        withSourcesJar()
    }
}